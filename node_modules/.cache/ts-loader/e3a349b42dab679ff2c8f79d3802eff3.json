{"remainingRequest":"/home/opam/dev/stand-up-manager/node_modules/babel-loader/lib/index.js!/home/opam/dev/stand-up-manager/node_modules/ts-loader/index.js??ref--13-2!/home/opam/dev/stand-up-manager/src/services/PersonService.ts","dependencies":[{"path":"/home/opam/dev/stand-up-manager/src/services/PersonService.ts","mtime":1531072402826},{"path":"/home/opam/dev/stand-up-manager/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/home/opam/dev/stand-up-manager/node_modules/babel-loader/lib/index.js","mtime":1526583314000},{"path":"/home/opam/dev/stand-up-manager/node_modules/ts-loader/index.js","mtime":1528433923000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.find-index\";\nimport _classCallCheck from \"/home/opam/dev/stand-up-manager/node_modules/@babel/runtime/helpers/builtin/es6/classCallCheck\";\nimport _createClass from \"/home/opam/dev/stand-up-manager/node_modules/@babel/runtime/helpers/builtin/es6/createClass\";\nimport ColorFactory from '../factories/ColorFactory';\nimport store, { CHANGE_PERSONS } from '../store';\nimport ImageService from '../services/ImageService';\n/**\n * This is a stateless service\n */\n\nvar PersonService =\n/*#__PURE__*/\nfunction () {\n  function PersonService() {\n    _classCallCheck(this, PersonService);\n\n    this.imageService = new ImageService();\n  }\n\n  _createClass(PersonService, [{\n    key: \"findIndex\",\n    value: function findIndex(person) {\n      return store.state.persons.indexOf(person);\n    }\n  }, {\n    key: \"contains\",\n    value: function contains(person) {\n      return this.findIndex(person) > -1;\n    }\n  }, {\n    key: \"save\",\n    value: function save(persons) {\n      store.commit(CHANGE_PERSONS, persons);\n    }\n  }, {\n    key: \"change\",\n    value: function change(person, new_person) {\n      var index = this.findIndex(person);\n\n      if (index > -1) {\n        var persons = store.state.persons.splice(0);\n        persons[index] = new_person;\n        this.save(persons);\n      }\n    }\n  }, {\n    key: \"getSize\",\n    value: function getSize() {\n      return store.state.persons.length;\n    }\n  }, {\n    key: \"addNew\",\n    value: function addNew(person) {\n      var copy = this.createCloneOfPersons();\n      copy.push(person);\n      store.commit(CHANGE_PERSONS, copy);\n    }\n  }, {\n    key: \"add\",\n    value: function add(name, image) {\n      var talking = false;\n      var currentTimeInSeconds = '0';\n      var favoriteColor = ColorFactory.getRandomColor();\n      var person = {\n        name: name,\n        image: image,\n        talking: talking,\n        currentTimeInSeconds: currentTimeInSeconds,\n        favoriteColor: favoriteColor\n      };\n\n      if (this.findByName(name) === null) {\n        var copy = this.createCloneOfPersons();\n        copy.push(person);\n        store.commit(CHANGE_PERSONS, copy);\n      } else {\n        throw new Error('Already exising');\n      }\n    }\n  }, {\n    key: \"createCloneOfPersons\",\n    value: function createCloneOfPersons() {\n      return store.state.persons.slice(0);\n    }\n  }, {\n    key: \"findByName\",\n    value: function findByName(name) {\n      var result = null;\n      store.state.persons.forEach(function (person) {\n        if (person.name === name) {\n          result = person;\n        }\n      });\n      return result;\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(person) {\n      var index = this.findIndex(person);\n      var copy = this.createCloneOfPersons();\n      copy.splice(Number(index), 1);\n      store.commit(CHANGE_PERSONS, copy);\n    }\n  }, {\n    key: \"removeAll\",\n    value: function removeAll() {\n      store.commit(CHANGE_PERSONS, []);\n    }\n  }, {\n    key: \"removeByName\",\n    value: function removeByName(name) {\n      var person = this.findByName(name);\n\n      if (person !== null) {\n        this.remove(person);\n      } else {\n        throw new Error('Person does not exist');\n      }\n    }\n  }, {\n    key: \"createDefaultPeople\",\n    value: function createDefaultPeople() {\n      var personService = new PersonService();\n      this.removeAll();\n      this.add('Federico', this.imageService.getImage(4));\n      this.add('Matheus', this.imageService.getImage(5));\n      this.add('Gabriel', this.imageService.getImage(0));\n      this.add('Ognjen', this.imageService.getImage(7));\n      this.add('Stefan', this.imageService.getImage(8));\n      this.add('Samuel', this.imageService.getImage(10));\n      this.add('Jozef', this.imageService.getImage(3));\n      this.add('Fritz', this.imageService.getImage(1));\n      this.add('Inge', this.imageService.getImage(9));\n      this.add('Emil', this.imageService.getImage(2));\n      this.add('Hoda', this.imageService.getImage(10));\n      this.add('AK', this.imageService.getImage(6));\n    }\n  }], [{\n    key: \"createPerson\",\n    value: function createPerson() {\n      var p = {\n        name: '',\n        image: '',\n        talking: false,\n        currentTimeInSeconds: '',\n        favoriteColor: ''\n      };\n      return p;\n    }\n  }]);\n\n  return PersonService;\n}();\n\nexport { PersonService as default };",{"version":3,"sources":["/home/opam/dev/stand-up-manager/src/services/PersonService.ts"],"names":[],"mappings":"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","sourcesContent":["import Person from '../interfaces/Person';\nimport Status from '../interfaces/Status';\nimport ColorFactory from '../factories/ColorFactory';\nimport store, { CHANGE_PERSONS } from '../store'; \nimport { STATUS_CODES } from 'http';\nimport ImageService from '../services/ImageService';\n\n\n/**\n * This is a stateless service\n */\nexport default class PersonService {\n\n    private imageService = new ImageService();\n\n    private findIndex(person: Person): number {\n        return store.state.persons.indexOf(person);\n    }\n\n    private contains(person: Person): boolean {\n        return this.findIndex(person) > -1;\n    }\n\n    public static createPerson(): Person {\n\n        const p: Person = {\n            name: '',\n            image: '',\n            talking: false,\n            currentTimeInSeconds : '',\n            favoriteColor: '',\n        };\n\n        return p;\n    }\n\n    public save(persons: Person[]) {\n        store.commit(CHANGE_PERSONS, persons);\n    }\n\n    public change(person: Person, new_person: Person) {\n        const index = this.findIndex(person);\n        if (index > -1) {\n           const persons = store.state.persons.splice(0);\n           persons[index] = new_person;\n\n           this.save(persons);\n        }\n    }\n\n    public getSize(): number {\n        return store.state.persons.length;\n    }\n\n    public addNew(person: Person): void {\n        const copy = this.createCloneOfPersons();\n        copy.push(person);\n        store.commit(CHANGE_PERSONS, copy);\n    }\n\n    public add(name: string, image: string): void {\n\n        const talking: boolean = false;\n        const currentTimeInSeconds: string = '0'; \n        const favoriteColor: string = ColorFactory.getRandomColor();\n\n        const person: Person = {\n            name,\n            image, \n            talking,\n            currentTimeInSeconds,\n            favoriteColor,\n        };\n\n        if (this.findByName(name) === null) {\n            const copy = this.createCloneOfPersons();\n            copy.push(person);\n            store.commit(CHANGE_PERSONS, copy);\n        } else {\n            throw new Error('Already exising');\n        }\n    }\n\n    private createCloneOfPersons(): Person[] {\n        return store.state.persons.slice(0);\n    }\n\n\n    public findByName(name: string) {\n        \n        let result: Person|null = null;\n        store.state.persons.forEach((person: Person) => {\n            if (person.name === name) {\n                result = person;\n            }\n        });\n\n        return result;\n    }\n\n    public remove(person: Person) {        \n        const index = this.findIndex(person);\n        const copy = this.createCloneOfPersons();      \n        copy.splice(Number(index), 1);\n        store.commit(CHANGE_PERSONS, copy);\n    }\n\n    public removeAll() {\n        store.commit(CHANGE_PERSONS, []);\n    }\n\n    public removeByName(name: string) {\n        \n        const person = this.findByName(name);        \n        if (person !== null) {\n            this.remove(person);\n        } else {\n            throw new Error('Person does not exist');\n        }\n    }\n\n    public createDefaultPeople() {\n        const personService = new PersonService();    \n\n        this.removeAll();\n\n        this.add('Federico',    this.imageService.getImage(4));\n        this.add('Matheus',     this.imageService.getImage(5));\n        this.add('Gabriel',     this.imageService.getImage(0));\n        this.add('Ognjen',      this.imageService.getImage(7));\n        this.add('Stefan',      this.imageService.getImage(8));\n        this.add('Samuel',      this.imageService.getImage(10));\n        this.add('Jozef',       this.imageService.getImage(3));\n        this.add('Fritz',       this.imageService.getImage(1));\n        this.add('Inge',        this.imageService.getImage(9));\n        this.add('Emil',        this.imageService.getImage(2));\n        this.add('Hoda',        this.imageService.getImage(10));\n        this.add('AK',          this.imageService.getImage(6));\n    }\n}\n\n"],"sourceRoot":""}]}