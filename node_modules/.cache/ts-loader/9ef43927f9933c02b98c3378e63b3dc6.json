{"remainingRequest":"/home/opam/dev/stand-up-manager/node_modules/babel-loader/lib/index.js!/home/opam/dev/stand-up-manager/node_modules/ts-loader/index.js??ref--13-2!/home/opam/dev/stand-up-manager/src/utils/TimeUtils.ts","dependencies":[{"path":"/home/opam/dev/stand-up-manager/src/utils/TimeUtils.ts","mtime":1530045116402},{"path":"/home/opam/dev/stand-up-manager/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/home/opam/dev/stand-up-manager/node_modules/babel-loader/lib/index.js","mtime":1526583314000},{"path":"/home/opam/dev/stand-up-manager/node_modules/ts-loader/index.js","mtime":1528433923000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.regexp.split\";\nimport _classCallCheck from \"/home/opam/dev/stand-up-manager/node_modules/@babel/runtime/helpers/builtin/es6/classCallCheck\";\nimport _createClass from \"/home/opam/dev/stand-up-manager/node_modules/@babel/runtime/helpers/builtin/es6/createClass\";\n\nvar TimeUtils =\n/*#__PURE__*/\nfunction () {\n  function TimeUtils() {\n    _classCallCheck(this, TimeUtils);\n  }\n\n  _createClass(TimeUtils, null, [{\n    key: \"from_HHmmss_to_Seconds\",\n    value: function from_HHmmss_to_Seconds(hms) {\n      var natural = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      if (hms === undefined) {\n        return 0;\n      }\n\n      if (natural === false) {\n        var a = hms.split(':'); // split it at the colons\n        // minutes are worth 60 seconds. Hours are worth 60 minutes.\n\n        return +a[0] * 60 * 60 + +a[1] * 60 + +a[2];\n      } else {\n        var hours = 0;\n        var mins = 0;\n        var seconds = 0;\n        hms.trim();\n        var h = hms.split('h');\n\n        if (h.length === 2) {\n          hours = Number(h[0]);\n          hms = h[1].trim();\n        }\n\n        var m = hms.split('m');\n\n        if (m.length === 2) {\n          mins = Number(m[0]);\n          hms = m[1].trim();\n        }\n\n        var s = hms.split('s');\n\n        if (hms) {\n          seconds = Number(s[0]);\n        }\n\n        return seconds + 60 * mins + 60 * 60 * hours;\n      }\n    }\n  }, {\n    key: \"from_Seconds_to_HHmmss\",\n    value: function from_Seconds_to_HHmmss(totalSeconds) {\n      var natural = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      if (totalSeconds === undefined) {\n        return '';\n      }\n\n      var ZERO = '0';\n      var COLON = ':';\n      var hours = Math.floor(totalSeconds / 3600);\n      var minutes = Math.floor((totalSeconds - hours * 3600) / 60);\n      var seconds = totalSeconds - hours * 3600 - minutes * 60; // round seconds\n\n      seconds = Math.round(seconds * 100) / 100;\n      var result = '';\n\n      if (natural === false) {\n        result = (hours < 10 ? ZERO + hours : hours).toString();\n        result += COLON + (minutes < 10 ? ZERO + minutes : minutes);\n        result += COLON + (seconds < 10 ? ZERO + seconds : seconds);\n      } else {\n        result = hours === 0 ? '' : hours.toString() + 'h ';\n        result += minutes === 0 ? '' : minutes.toString() + 'm ';\n        result += seconds === 0 ? '' : seconds.toString() + 's';\n      }\n\n      return result.toString();\n    }\n  }, {\n    key: \"getOvertimeInSeconds\",\n    value: function getOvertimeInSeconds(currentTimeInSeconds, timeLimitInSeconds) {\n      return currentTimeInSeconds > timeLimitInSeconds ? currentTimeInSeconds - timeLimitInSeconds : 0;\n    }\n  }, {\n    key: \"getOvertimeInHHmmss\",\n    value: function getOvertimeInHHmmss(currentTimeInSeconds, timeLimitInSeconds, natural) {\n      var seconds = TimeUtils.getOvertimeInSeconds(currentTimeInSeconds, timeLimitInSeconds);\n      return seconds === 0 ? '' : ' + ' + TimeUtils.from_Seconds_to_HHmmss(seconds, natural);\n    }\n    /**\n     * will return current time or time limit when current time is higher\n     *\n     * @param currentTimeInSeconds\n     * @param timeLimitInSeconds\n     * @param natural\n     */\n\n  }, {\n    key: \"getCurrentTimeInHHmmss\",\n    value: function getCurrentTimeInHHmmss(currentTimeInSeconds, timeLimitInSeconds, natural) {\n      var seconds = currentTimeInSeconds <= timeLimitInSeconds ? currentTimeInSeconds : timeLimitInSeconds;\n      return seconds === 0 ? '' : TimeUtils.from_Seconds_to_HHmmss(seconds, natural);\n    }\n  }]);\n\n  return TimeUtils;\n}();\n\nexport { TimeUtils as default };",{"version":3,"sources":["/home/opam/dev/stand-up-manager/src/utils/TimeUtils.ts"],"names":[],"mappings":";;;;;;IAAc,S;;;;;;;;;2CAE2B,G,EAAqC;AAAA,UAAxB,OAAwB,uEAAL,KAAK;;AAEtE,UAAI,QAAQ,SAAZ,EAAuB;AACnB,eAAO,CAAP;AACH;;AAED,UAAI,YAAY,KAAhB,EAAuB;AACnB,YAAM,IAAI,IAAI,KAAJ,CAAU,GAAV,CAAV,CADmB,CACO;AAE1B;;AACA,eAAQ,CAAC,EAAE,CAAF,CAAF,GAAU,EAAV,GAAe,EAAf,GAAqB,CAAC,EAAE,CAAF,CAAF,GAAU,EAA9B,GAAoC,CAAC,EAAE,CAAF,CAA5C;AACH,OALD,MAKO;AACH,YAAI,QAAQ,CAAZ;AACA,YAAI,OAAO,CAAX;AACA,YAAI,UAAU,CAAd;AAEA,YAAI,IAAJ;AAEA,YAAM,IAAI,IAAI,KAAJ,CAAU,GAAV,CAAV;;AACA,YAAI,EAAE,MAAF,KAAa,CAAjB,EAAoB;AAChB,kBAAQ,OAAO,EAAE,CAAF,CAAP,CAAR;AACA,gBAAM,EAAE,CAAF,EAAK,IAAL,EAAN;AACH;;AACD,YAAM,IAAI,IAAI,KAAJ,CAAU,GAAV,CAAV;;AACA,YAAI,EAAE,MAAF,KAAa,CAAjB,EAAoB;AAChB,iBAAO,OAAO,EAAE,CAAF,CAAP,CAAP;AACA,gBAAM,EAAE,CAAF,EAAK,IAAL,EAAN;AACH;;AACD,YAAM,IAAI,IAAI,KAAJ,CAAU,GAAV,CAAV;;AACA,YAAI,GAAJ,EAAS;AACL,oBAAU,OAAO,EAAE,CAAF,CAAP,CAAV;AACH;;AACD,eAAO,UAAW,KAAK,IAAhB,GAAyB,KAAK,EAAL,GAAU,KAA1C;AACH;AACJ;;;2CAEoC,Y,EAA8C;AAAA,UAAxB,OAAwB,uEAAL,KAAK;;AAE/E,UAAI,iBAAiB,SAArB,EAAgC;AAC5B,eAAO,EAAP;AACH;;AAED,UAAM,OAAO,GAAb;AACA,UAAM,QAAQ,GAAd;AAEA,UAAM,QAAU,KAAK,KAAL,CAAW,eAAe,IAA1B,CAAhB;AACA,UAAM,UAAU,KAAK,KAAL,CAAW,CAAC,eAAgB,QAAQ,IAAzB,IAAkC,EAA7C,CAAhB;AACA,UAAI,UAAU,eAAgB,QAAQ,IAAxB,GAAiC,UAAU,EAAzD,CAX+E,CAa/E;;AACA,gBAAU,KAAK,KAAL,CAAW,UAAU,GAArB,IAA4B,GAAtC;AAEA,UAAI,SAAiB,EAArB;;AAEA,UAAI,YAAY,KAAhB,EAAuB;AACnB,iBAAS,CAAC,QAAQ,EAAR,GAAa,OAAO,KAApB,GAA4B,KAA7B,EAAoC,QAApC,EAAT;AACA,kBAAU,SAAS,UAAU,EAAV,GAAe,OAAO,OAAtB,GAAgC,OAAzC,CAAV;AACA,kBAAU,SAAS,UAAW,EAAX,GAAgB,OAAO,OAAvB,GAAiC,OAA1C,CAAV;AACH,OAJD,MAIO;AACH,iBAAU,UAAY,CAAZ,GAAgB,EAAhB,GAAqB,MAAM,QAAN,KAAqB,IAApD;AACA,kBAAU,YAAY,CAAZ,GAAgB,EAAhB,GAAqB,QAAQ,QAAR,KAAqB,IAApD;AACA,kBAAU,YAAY,CAAZ,GAAgB,EAAhB,GAAqB,QAAQ,QAAR,KAAqB,GAApD;AACH;;AAED,aAAO,OAAO,QAAP,EAAP;AACH;;;yCAEkC,oB,EAAsB,kB,EAAkB;AACvE,aAAO,uBAAuB,kBAAvB,GAA4C,uBAAuB,kBAAnE,GAAwF,CAA/F;AACH;;;wCAGO,oB,EACA,kB,EACA,O,EAAgB;AACpB,UAAM,UAAU,UAAU,oBAAV,CAA+B,oBAA/B,EAAqD,kBAArD,CAAhB;AACA,aAAO,YAAY,CAAZ,GAAgB,EAAhB,GAAqB,QAAQ,UAAU,sBAAV,CAAiC,OAAjC,EAA0C,OAA1C,CAApC;AACH;AAED;;;;;;;;;;2CAQI,oB,EACA,kB,EACA,O,EAAgB;AAChB,UAAM,UAAU,wBAAwB,kBAAxB,GAA6C,oBAA7C,GAAoE,kBAApF;AAEA,aAAO,YAAY,CAAZ,GAAgB,EAAhB,GAAqB,UAAU,sBAAV,CAAiC,OAAjC,EAA0C,OAA1C,CAA5B;AACH;;;;;;SA/FS,S","sourcesContent":["export default class TimeUtils {\n    \n    public static from_HHmmss_to_Seconds(hms: string, natural: boolean = false): number {\n        \n        if (hms === undefined) {\n            return 0;\n        }\n\n        if (natural === false) {\n            const a = hms.split(':'); // split it at the colons\n    \n            // minutes are worth 60 seconds. Hours are worth 60 minutes.\n            return (+a[0]) * 60 * 60 + (+a[1]) * 60 + (+a[2]); \n        } else {\n            let hours = 0;\n            let mins = 0;\n            let seconds = 0;\n            \n            hms.trim();\n\n            const h = hms.split('h');\n            if (h.length === 2) {\n                hours = Number(h[0]);\n                hms = h[1].trim();\n            }\n            const m = hms.split('m');\n            if (m.length === 2) {\n                mins = Number(m[0]);\n                hms = m[1].trim();\n            }   \n            const s = hms.split('s');         \n            if (hms) {\n                seconds = Number(s[0]);\n            }\n            return seconds + (60 * mins) + (60 * 60 * hours);\n        }\n    }\n\n    public static from_Seconds_to_HHmmss(totalSeconds: number, natural: boolean = false): string {\n        \n        if (totalSeconds === undefined) {\n            return '';\n        }\n\n        const ZERO = '0';\n        const COLON = ':';\n\n        const hours   = Math.floor(totalSeconds / 3600);\n        const minutes = Math.floor((totalSeconds - (hours * 3600)) / 60);\n        let seconds = totalSeconds - (hours * 3600) - (minutes * 60);\n\n        // round seconds\n        seconds = Math.round(seconds * 100) / 100;\n\n        let result: string = '';\n        \n        if (natural === false) {\n            result = (hours < 10 ? ZERO + hours : hours).toString();\n            result += COLON + (minutes < 10 ? ZERO + minutes : minutes);\n            result += COLON + (seconds  < 10 ? ZERO + seconds : seconds);\n        } else {\n            result =  hours   === 0 ? '' : hours.toString()   + 'h ';\n            result += minutes === 0 ? '' : minutes.toString() + 'm ';\n            result += seconds === 0 ? '' : seconds.toString() + 's';\n        }\n        \n        return result.toString();\n    }\n\n    public static getOvertimeInSeconds(currentTimeInSeconds, timeLimitInSeconds) {\n        return currentTimeInSeconds > timeLimitInSeconds ? currentTimeInSeconds - timeLimitInSeconds : 0;\n    }\n\n    public static getOvertimeInHHmmss(\n            currentTimeInSeconds: number, \n            timeLimitInSeconds: number, \n            natural: boolean): string {\n        const seconds = TimeUtils.getOvertimeInSeconds(currentTimeInSeconds, timeLimitInSeconds);\n        return seconds === 0 ? '' : ' + ' + TimeUtils.from_Seconds_to_HHmmss(seconds, natural);\n    }\n\n    /**\n     * will return current time or time limit when current time is higher\n     * \n     * @param currentTimeInSeconds \n     * @param timeLimitInSeconds \n     * @param natural \n     */\n    public static getCurrentTimeInHHmmss(\n        currentTimeInSeconds: number, \n        timeLimitInSeconds: number, \n        natural: boolean): string {\n        const seconds = currentTimeInSeconds <= timeLimitInSeconds ? currentTimeInSeconds : timeLimitInSeconds;\n    \n        return seconds === 0 ? '' : TimeUtils.from_Seconds_to_HHmmss(seconds, natural);\n    }\n}\n\n"],"sourceRoot":""}]}