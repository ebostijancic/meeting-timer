{"remainingRequest":"/home/opam/dev/stand-up-manager/node_modules/babel-loader/lib/index.js!/home/opam/dev/stand-up-manager/node_modules/ts-loader/index.js??ref--13-2!/home/opam/dev/stand-up-manager/src/factories/Stopwatch.ts","dependencies":[{"path":"/home/opam/dev/stand-up-manager/src/factories/Stopwatch.ts","mtime":1530992378738},{"path":"/home/opam/dev/stand-up-manager/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/home/opam/dev/stand-up-manager/node_modules/babel-loader/lib/index.js","mtime":1526583314000},{"path":"/home/opam/dev/stand-up-manager/node_modules/ts-loader/index.js","mtime":1528433923000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\nimport _classCallCheck from \"/home/opam/dev/stand-up-manager/node_modules/@babel/runtime/helpers/builtin/es6/classCallCheck\";\nimport _createClass from \"/home/opam/dev/stand-up-manager/node_modules/@babel/runtime/helpers/builtin/es6/createClass\";\n\nvar Stopwatch =\n/*#__PURE__*/\nfunction () {\n  function Stopwatch() {\n    _classCallCheck(this, Stopwatch);\n\n    this.id = null;\n    this.startTime = 0;\n    this.currentTimeInSeconds = 0;\n    this.REFRESH_TIME_EVERY_MILISECONDS = 500;\n  }\n\n  _createClass(Stopwatch, [{\n    key: \"secondsToMiliseconds\",\n    value: function secondsToMiliseconds(seconds) {\n      return seconds * 1000;\n    }\n  }, {\n    key: \"setCurrentTimeInSeconds\",\n    value: function setCurrentTimeInSeconds(seconds) {\n      this.currentTimeInSeconds = seconds;\n    }\n  }, {\n    key: \"start\",\n    value: function start(callback) {\n      var _this = this;\n\n      if (this.isRunning() === true) {\n        throw new Error('Stopwatch already running');\n      }\n\n      var now = Date.now();\n      this.startTime = now - this.secondsToMiliseconds(this.currentTimeInSeconds);\n      this.id = setInterval(function () {\n        callback(_this.getTime());\n      }, this.REFRESH_TIME_EVERY_MILISECONDS);\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      clearInterval(this.id);\n      this.id = null;\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.stop();\n      this.startTime = 0;\n      this.currentTimeInSeconds = 0;\n    }\n  }, {\n    key: \"getStartTime\",\n    value: function getStartTime() {\n      return this.startTime;\n    }\n  }, {\n    key: \"getTime\",\n    value: function getTime() {\n      if (this.startTime > 0) {\n        this.currentTimeInSeconds = parseFloat(Number((Date.now() - this.startTime) / 1000).toFixed(1));\n      }\n\n      return this.currentTimeInSeconds;\n    }\n  }, {\n    key: \"isRunning\",\n    value: function isRunning() {\n      return this.id !== null;\n    }\n  }]);\n\n  return Stopwatch;\n}();\n\nexport { Stopwatch as default };",{"version":3,"sources":["/home/opam/dev/stand-up-manager/src/factories/Stopwatch.ts"],"names":[],"mappings":";;;;IAEc,S;;;AAAd,uBAAA;AAAA;;AAEY,SAAA,EAAA,GAAU,IAAV;AACA,SAAA,SAAA,GAAoB,CAApB;AACA,SAAA,oBAAA,GAA+B,CAA/B;AACA,SAAA,8BAAA,GAAiC,GAAjC;AAgDX;;;;yCA9CgC,O,EAAO;AAChC,aAAO,UAAU,IAAjB;AACH;;;4CAE8B,O,EAAe;AAC1C,WAAK,oBAAL,GAA4B,OAA5B;AACH;;;0BAEY,Q,EAA2B;AAAA;;AACpC,UAAI,KAAK,SAAL,OAAqB,IAAzB,EAA+B;AAC3B,cAAM,IAAI,KAAJ,CAAU,2BAAV,CAAN;AACH;;AACD,UAAM,MAAM,KAAK,GAAL,EAAZ;AACA,WAAK,SAAL,GAAiB,MAAM,KAAK,oBAAL,CAA0B,KAAK,oBAA/B,CAAvB;AACA,WAAK,EAAL,GAAU,YAAY,YAAK;AACvB,iBAAS,MAAK,OAAL,EAAT;AACH,OAFS,EAEP,KAAK,8BAFE,CAAV;AAGH;;;2BAEU;AACP,oBAAc,KAAK,EAAnB;AACA,WAAK,EAAL,GAAU,IAAV;AACH;;;4BAEW;AACR,WAAK,IAAL;AACA,WAAK,SAAL,GAAiB,CAAjB;AACA,WAAK,oBAAL,GAA4B,CAA5B;AACH;;;mCAEkB;AACf,aAAO,KAAK,SAAZ;AACH;;;8BAEa;AACV,UAAI,KAAK,SAAL,GAAiB,CAArB,EAAwB;AACpB,aAAK,oBAAL,GAA4B,WAAW,OAAO,CAAC,KAAK,GAAL,KAAa,KAAK,SAAnB,IAAgC,IAAvC,EAA6C,OAA7C,CAAqD,CAArD,CAAX,CAA5B;AACH;;AACD,aAAO,KAAK,oBAAZ;AAEH;;;gCAEe;AACZ,aAAO,KAAK,EAAL,KAAY,IAAnB;AACH;;;;;;SAnDS,S","sourcesContent":["export type StopwatchCallback = (time: number) => void;\n\nexport default class Stopwatch {\n\n    private id: any = null;\n    private startTime: number = 0;\n    private currentTimeInSeconds: number = 0;\n    private REFRESH_TIME_EVERY_MILISECONDS = 500;\n\n    private secondsToMiliseconds(seconds) {\n        return seconds * 1000;\n    }\n\n    public setCurrentTimeInSeconds(seconds: number) {\n        this.currentTimeInSeconds = seconds;\n    }\n\n    public start(callback: StopwatchCallback) {\n        if (this.isRunning() === true) {\n            throw new Error('Stopwatch already running');\n        }\n        const now = Date.now();\n        this.startTime = now - this.secondsToMiliseconds(this.currentTimeInSeconds);\n        this.id = setInterval(() => {\n            callback(this.getTime());           \n        }, this.REFRESH_TIME_EVERY_MILISECONDS);\n    }\n\n    public stop() {\n        clearInterval(this.id);\n        this.id = null;\n    }\n\n    public reset(): void {\n        this.stop();\n        this.startTime = 0;\n        this.currentTimeInSeconds = 0;\n    } \n\n    public getStartTime(): number {\n        return this.startTime;\n    }\n\n    public getTime(): number {\n        if (this.startTime > 0) {\n            this.currentTimeInSeconds = parseFloat(Number((Date.now() - this.startTime) / 1000).toFixed(1));            \n        }\n        return this.currentTimeInSeconds ;\n\n    }\n\n    public isRunning(): boolean {\n        return this.id !== null;\n    }\n\n}\n\n"],"sourceRoot":""}]}