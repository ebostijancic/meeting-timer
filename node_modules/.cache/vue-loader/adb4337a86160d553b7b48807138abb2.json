{"remainingRequest":"/home/opam/dev/stand-up-manager/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/opam/dev/stand-up-manager/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/opam/dev/stand-up-manager/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/opam/dev/stand-up-manager/src/views/StandUp.vue?vue&type=template&id=33ff9747&scoped=true","dependencies":[{"path":"/home/opam/dev/stand-up-manager/src/views/StandUp.vue","mtime":1530479175607},{"path":"/home/opam/dev/stand-up-manager/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/home/opam/dev/stand-up-manager/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1526010763000},{"path":"/home/opam/dev/stand-up-manager/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/home/opam/dev/stand-up-manager/node_modules/vue-loader/lib/index.js","mtime":1527860006000}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"div\", { staticClass: \"container\" }, [\n    _c(\n      \"div\",\n      { staticClass: \"overview-panel\" },\n      [\n        _c(\"div\", { staticClass: \"talking-general-settings-container\" }, [\n          _c(\"div\", { staticClass: \"time-limit\" }, [\n            _c(\"label\", [_vm._v(\"Time per Person\")]),\n            _c(\"input\", {\n              directives: [\n                {\n                  name: \"model\",\n                  rawName: \"v-model\",\n                  value: _vm.timeLimit,\n                  expression: \"timeLimit\"\n                }\n              ],\n              staticClass: \"time-per-person\",\n              attrs: { placeholder: \"0h 1m 30s\" },\n              domProps: { value: _vm.timeLimit },\n              on: {\n                input: function($event) {\n                  if ($event.target.composing) {\n                    return\n                  }\n                  _vm.timeLimit = $event.target.value\n                }\n              }\n            })\n          ]),\n          _c(\"div\", { staticClass: \"duration-container\" }, [\n            _c(\"label\", [_vm._v(\"Duration\")]),\n            _c(\n              \"span\",\n              {\n                staticClass: \"duration\",\n                attrs: { title: \"Click to pause main Stopwatch\" },\n                on: {\n                  click: function($event) {\n                    _vm.pauseMainStopwatch()\n                  }\n                }\n              },\n              [\n                _c(\"span\", { staticClass: \"duration-timer\" }, [\n                  _vm._v(\n                    _vm._s(\n                      _vm.durationInHHmmss ? _vm.durationInHHmmss : \"0h 0m 0s\"\n                    )\n                  )\n                ]),\n                _vm.talkingPerson.name === \"\" &&\n                _vm.mainStopwatch.isRunning() === false &&\n                _vm.mainStopwatch.getTime() > 0\n                  ? _c(\"span\", { staticClass: \"paused\" }, [_vm._v(\"Paused\")])\n                  : _vm._e()\n              ]\n            )\n          ])\n        ]),\n        _c(\"HeadPool\", {\n          attrs: {\n            person: _vm.talkingPerson,\n            timeLimitInSeconds: _vm.timeLimitInSeconds\n          }\n        })\n      ],\n      1\n    ),\n    _c(\n      \"div\",\n      { staticClass: \"pools\" },\n      _vm._l(_vm.personArray, function(p) {\n        return _c(\"Pool\", {\n          key: p.name,\n          attrs: {\n            person: p,\n            timeLimitInSeconds: _vm.timeLimitInSeconds,\n            talkingPerson: _vm.talkingPerson,\n            setTalkingPerson: _vm.setTalkingPerson,\n            removePerson: _vm.removePerson,\n            onlySetter: false\n          }\n        })\n      })\n    ),\n    _c(\"div\", { staticClass: \"add-person-container\" }, [\n      _c(\"img\", { attrs: { src: _vm.newPersonImage } }),\n      _c(\"input\", {\n        directives: [\n          {\n            name: \"model\",\n            rawName: \"v-model\",\n            value: _vm.newPersonName,\n            expression: \"newPersonName\"\n          }\n        ],\n        attrs: { title: \"Add Person\" },\n        domProps: { value: _vm.newPersonName },\n        on: {\n          input: function($event) {\n            if ($event.target.composing) {\n              return\n            }\n            _vm.newPersonName = $event.target.value\n          }\n        }\n      }),\n      _c(\n        \"button\",\n        {\n          on: {\n            click: function() {\n              _vm.addPerson()\n            }\n          }\n        },\n        [_vm._v(\"+\")]\n      )\n    ]),\n    _c(\n      \"div\",\n      {\n        on: {\n          click: function($event) {\n            _vm.clickFirebase()\n          }\n        }\n      },\n      [_vm._v(\"test firebase\")]\n    )\n  ])\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}